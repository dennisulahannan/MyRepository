

GOPTIONS ACCESSIBLE;
 
/* Create Start Date and DateTime */
options mprint symbolgen;

/* Last record (Id) - Temporary to join tables together */ 

PROC SQL;
   CREATE TABLE work.max_timing AS 
   SELECT (max(t1.PROCESS_ID)) AS max_id
		FROM cacirsrh.project_timing t1;
QUIT;

PROC SQL NOPRINT;
SELECT max_id
INTO :MAX_ID
FROM work.max_timing;
QUIT;

%put &MAX_ID;


data work.timing;
length PROCESS_ID 8;
PROCESS_ID = &MAX_ID + 1;
length PROCESS_NAME $ 100;
PROCESS_NAME='Results Files Process';
format PROJECT_NUMBER 12.;
PROJECT_NUMBER = 104;
format PROCESS_START_DATE date9.;
PROCESS_START_DATE = today();
format PROCESS_START_DATETIME datetime20.;
PROCESS_START_DATETIME = datetime();
format PROCESS_START_TIME time8.;
PROCESS_START_TIME = timepart(PROCESS_START_DATETIME);
put "Formatted day: " PROCESS_START_DATE " , formatted datetime: " PROCESS_START_DATETIME " , formatted time: " PROCESS_START_TIME;
run;


GOPTIONS ACCESSIBLE;
/* Overall Variables */

options compress=yes;

/* Setup Dates */


%Let rptsasdate = &sysdate;

%global   result_file  file_upload_date  file_date charvar  Column_Names Stream;

data _null_;
	call symput("numdate",STRIP(PUT(INPUT( "&rptsasdate", DATE7.),YYMMDDN8.)));
	call symput("filedate",STRIP(PUT(INPUT( "&rptsasdate", DATE7.),YYMMDDd10.)));
	call symput("file_upload_date","'" || STRIP(PUT(INPUT( "&rptsasdate", DATE7.),date9.)) || "'d");
 	call symput("start_date",put(intnx('month',INPUT( "&sysdate", DATE9.),-1,'b'),date9.));
	call symput("end_date",put(intnx('month',INPUT( "&sysdate", DATE9.),-1,'e'),date9.));
	call symput("month_name",compress(put(intnx('month',INPUT( "&sysdate", anydtdte.),-1,'B'),monname.)));
	call symput("month_year",compress(put(intnx('month',INPUT( "&sysdate", anydtdte.),-1,'B'),monyy.)));
run;




%let gm_start_date = intnx("month","&start_date."d,-11,"b");


run;

%put The Date is &numdate;
%put The File Date is &filedate;
%put the update date is  &file_upload_date;


/* Input File to be Read */

%let path1 =\\internal.bupa.com.au\DFS$\MEL-SHARED\Marketing & Sales\Customer Insights\Research\FTP\In;
%put &path1.;

%let wash_file = "\\internal.bupa.com.au\DFS$\MEL-SHARED\Marketing & Sales\Customer Insights\Research\FTP\In\*.csv";
%put &wash_file.;


/* Email Variables */
data _null_;

run;

FILENAME KICKOFF EMAIL
	BCC = ( &emails )
	SUBJECT="Medallia Results Files Process - Start";

/* Send Email */
DATA _NULL_;
	FILE KICKOFF;
	PUT 'Morning,';
	PUT ' ';
	PUT "The Medallia Results Files process for &rptsasdate. has started.";
	PUT ' ';
	PUT 'Have a nice day.';
RUN;

%macro Column_increase(Stream,Column_Names);

	proc sql noprint;
	    create table work.table_count as 
		select count(*) into  :nobs 
			from work.h2only;
	quit;

	%put &nobs.;

	/* Send Notification Email */
	FILENAME TRANSERR EMAIL 
		BCC=(&emails )
		SUBJECT="Incoming Results File has more columns"
		
	;
	 
	/* Send Email */
	DATA _NULL_;
		FILE TRANSERR;
		PUT 'Morning,';
		PUT ' ';
		PUT "Incoming Results File has more columns.";
		PUT ' ';
		PUT 'Stream_Name: ' %str("&Stream.");
		PUT ' ';
		PUT %str("&Column_Names.") ' are the new columns.';
	run;

%mend;



GOPTIONS ACCESSIBLE;
/******************/
/* Dataset         */
/******************/
/******************/
/* Dataset         */
/******************/
%Macro ImportData_Results(file_name,file_date,output_dataset);
	%let filename=%sysfunc(catx(\,&path1,&file_name));

	%if %sysfunc(fileexist(&filename)) %then
		%do;
			filename holdit  "\\internal.bupa.com.au\DFS$\MEL-SHARED\Marketing & Sales\Customer Insights\Research\FTP\In\Temp\test1.txt" lrecl=32766;

			/*Remove carriage return and linefeed characters within quoted strings*/
			%let repA=' '; /* replacement character LF */
			%let repD=' '; /* replacement character CR */
			%let dsnnme="&filename";

			data _null_;
				/* RECFM=N reads the file in binary format. The file consists */
				/* of a stream of bytes with no record boundaries. SHAREBUFFERS */
				/* specifies that the FILE statement and the INFILE statement */
				/* share the same buffer. */
				infile &dsnnme recfm=n sharebuffers;
				file &dsnnme recfm=n;

				/* OPEN is a flag variable used to determine if the CR/LF is within */
				/* double quotes or not. Retain this value. */
				retain open 0;
				input a $char1.;

				/* If the character is a double quote, set OPEN to its opposite value. */
				if a = '"' then
					open = ^(open);

				/* If the CR or LF is after an open double quote, replace the byte with */
				/* the appropriate value. */
				if open then
					do;
						if a = '0D'x then
							put &repD;
						else if a = '0A'x then
							put &repA;
					end;
			run;

			filename in_file pipe "dir ""&filename."" /b";

			/* Reading in the .csv file and creating a temp .txt file                                           */
			/* After Writing out the first row with Column Names will write the second row with '*'(asterix)    */
			/* Asterix will be equal to the number of column headers present in File                            */
			/* Open filename 'holdit' (test1.txt) */
			data _null_;
				length string $4000;
				file holdit LRECL=32767;
				infile "&filename" lrecl=32767 end = done;
				input;
				put _infile_;
				wcount = countw(_infile_,',');
				string =('*'||repeat(',*',wcount-2));
				put string;

				do until(done);
					input;
					put _infile_;
				end;

				stop;
			run;

			/* this step release the input file */
			filename in_file;

			proc import
				datafile=holdit out=work.temp DBMS=CSV replace;
				guessingrows=4444;
				getnames=yes;
			run;

			/* Setting all the Variable to a default var length of 4000 */
			filename tmp "\\internal.bupa.com.au\DFS$\MEL-SHARED\Marketing & Sales\Customer Insights\Research\FTP\In\Temp\test2.txt" lrecl=32766;
			filename holdit;

			data _null_;
				set work.temp  end=eod;
				array chrvar {*} $1000 _character_;
				array len{1000} _temporary_;

				do c=1 to dim(chrvar);
					len{c}=max(4000,length(chrvar{c}));
				end;

				file tmp;

				if eod then
					do c=1 to dim(chrvar);
						vnam=vname(chrvar{c});
						put vnam '$' len{c};
					end;
			run;

			data work.want;
				length %include tmp ;;
				format _character_ $4000.;
				informat _character_ $4000.;
				set work.temp;
			run;

			data work.want_f (drop=c);
				set work.want;
				array chrvar {*} $1000 _character_;

				do c=1 to dim(chrvar);
					chrvar{c}= transtrn (chrvar{c},'â€™', "'");
				end;
			run;


			/*          If table does exist  */
			%if %sysfunc(exist(caciextl.&output_dataset.)) %then
				%do;

					data work.compare_dataset;
						set caciextl.&output_dataset.(obs=1);
						drop result_file resultsloaddate Results_FileDate RESPONSE_DATE_SAS;
					run;

					data work.have;
						set work.compare_dataset;
					run;

					data work.new;
						set work.want_f;
					run;

					proc contents data=work.have out=h1out(keep=name);
					run;

					proc contents data=work.new out=h2out(keep=name);
					run;

					proc sort data=h1out;
						by name;
					run;

					proc sort data=h2out;
						by name;
					run;

					data common h1only h2only;
						merge h1out(in=h1) h2out(in=h2);
						by name;

						if h1 and h2 then
							output common;
						else if h1 and not h2 then
							output h1only;
						else output h2only;
					run;

					*Selecting character variables;
					proc sql;
						select name into :charvar separated by ','
							from work.h2only;
					quit;

					%put &charvar.;

					proc sql;
						select count(*) into  :nobs 
							from work.h2only;
					quit;

					%put &nobs.;

					data _null_;
						%if %eval(&nobs.) > 0 %then
							%do;
								%Column_increase(Stream=%BQuote(&file_name),Column_Names=%BQuote(&charvar));
							%end;
					run;

					data work.&output_dataset.;
						format ResultsLoadDate Results_FileDate date9.;
						set work.want_f(firstobs=2);
						Result_file=symget('file_name');
						ResultsLoadDate="&file_upload_date."d;
						Results_FileDate=&file_date.;
					run;

		
					data &output_dataset._t;
						set caciextl.&output_dataset. work.&output_dataset.;
					run;

					data caciextl.&output_dataset.;
						set caciextl.&output_dataset. work.&output_dataset.;
					run;

					proc sort data=&output_dataset._t out=&output_dataset._t1;
						by surveyid Results_FileDate;
					run;

					data caciextl.&output_dataset.;
						set &output_dataset._t1;
						by surveyid;
						if last.surveyid then output;
					run;

					%put 'second time';

					%sysexec  move "&filename" "&path1\ArchiveProcessed";
				%end;
			%else
				%do;
					/*          If table does not exist  */
					data work.&output_dataset.;
						length Result_file $200.;
						format ResultsLoadDate Results_FileDate date9.;
						set work.want_f(firstobs=2);
						Result_file=symget('file_name');
						ResultsLoadDate="&file_upload_date."d;
						Results_FileDate=&file_date.;
					run;

					data caciextl.&output_dataset.;
						set work.&output_dataset.;
					run;

					%put 'first time';

					%sysexec  move "&filename" "&path1\ArchiveProcessed";
				%end;
		%end;
%Mend ImportData_Results;




GOPTIONS ACCESSIBLE;
/*****************************************************************************************************************
Purpose: To Ingest the daily Results files that comes back from Medallia
Author:  Dennis U 
Creation Date:  May-23-2022
*****************************************************************************************************************/

/* Read in all files from FTP In directory */
filename infile pipe "dir "&wash_file." /b";

data input_file;
	length file_name   $200;
	format file_date date9.;
	infile infile truncover;
	input file_name $50.;
	file_date=input(scan((scan(file_name,-1,'_')),1,'.'),YYMMDD10.);
	actual_file_name=upcase(substr(file_name,1,(length(file_name)-length(scan(file_name,-1,'_')))-1));
	call symput('file_date',"'" || STRIP(PUT(INPUT( "&rptsasdate", DATE7.),date9.)) || "'d");
	call symput ('file_name',file_name);
run;

/* this step release the input file */
filename infile;

proc sort data=input_file nodupkey;
	by actual_file_name file_date;
run;

%put &file_date.;
%put &file_name.;

/*Count number of records of filenames in dataset*/
data _null_;
	%global records;
	set input_file end=last;

	if last then call symputx("Records",put(_n_,8.)); /*_n_ is observation number in sas dataset*/
run;

%put &Records.;

/* Main Logic - Reading result file based on the stream */
%macro Import_File(records);
	%do i=1 %to &records.;

		data _null_;
			set input_file;
			call symput ('file_name',strip(file_name));
			call symput ('file_date',strip(file_date));
			select (actual_file_name);
				when ('BUPA_STRATEGIC_EXPORT')                call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_hi_strategic_med)'));
				when ('BUPA_DIGITAL_EXPORT')                  call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_hi_digital_med)'));
/*				when ('BUPA_UMME_EXPORT_BOOSTER')             call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_hi_umme_booster_med)'));*/
/*				when ('BUPA_UMME_PARALLEL_EXPORT')            call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_hi_umme_parallel_med)'));*/
				when ('BUPA_UMME_EXPORT')                     call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_hi_umme_med)'));
				when ('BUPA_TELEHEALTH_EXPORT')               call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_hi_telehealth_med)'));
				when ('BUPA_BABC_EXPORT')                     call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_hi_babc_med)'));
				when ('BUPA_RETAIL_EXPORT')                   call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_hi_retail_med)'));
				when ('BUPA_BMVS_PARTNER_PROVIDER_EXPORT')    call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,RESULTS_BMVS_PTNR_MED)'));
				when ('BUPA_BMVS_BUPA_CENTRE_EXPORT')         call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_bmvs_bupa_med)'));
				
				when ('BUPA_DENTAL_EXPORT')                   call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,RESULTS_BUPA_DENTAL_MED)'));
/*				when ('BUPA_IVP_EXPORT')                      call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_IVP_med)'));*/
				when ('BUPA_OPTICAL_EXPORT')                  call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_Optical_med)'));
				when ('BUPA_COMPLAINTS_EXPORT')               call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_hi_Complaints_med)'));
				when ('BUPA_BLUA_POST_APPOINTMENT_EXPORT')    call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_Blua_med)'));
				when ('BUPA_HOSPITAL_EXPORT')    			  call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_hi_hospital_med)'));
                when ('BUPA_LIFE_REWARDS_EXPORT')    		  call execute(cats('%nrstr(%ImportData_Results)(&file_name,&file_date,results_hi_rewards_med)'));
				otherwise;
			end;

			%put 'exited loop 1';
		run;

	%end;
%mend;

%Import_File(&records);


 

/**/
%macro sort_response_date(dataset1);

    data &dataset1.;
	format  RESPONSE_DATE_SAS date9.;
    set  caciextl.&dataset1.;
	RESPONSE_DATE_SAS=input(scan(RESPONSE_DATE, 1,' '),YYMMDD10.);
/*	drop VAR:;*/
	run;
    
	proc sort data=&dataset1. out=caciextl.&dataset1.;
	by Results_FileDate;
	run;


%mend;

%sort_response_date(results_hi_babc_med);
%sort_response_date(results_bupa_dental_med);
%sort_response_date(results_bmvs_bupa_med);
%sort_response_date(results_bmvs_ptnr_med);
%sort_response_date(results_hi_retail_med);
%sort_response_date(results_hi_strategic_med);
%sort_response_date(results_hi_telehealth_med);
%sort_response_date(results_hi_hospital_med);
%sort_response_date(results_hi_umme_med);
%sort_response_date(results_Optical_med);
%sort_response_date(results_hi_rewards_med);


/**/
/*%macro sort_response_date_var(dataset1);*/
/**/
/*    data &dataset1.;*/
/*	format  RESPONSE_DATE_SAS date9.;*/
/*    set  caciextl.&dataset1.;*/
/*	RESPONSE_DATE_SAS=input(scan(RESPONSE_DATE, 1,' '),YYMMDD10.);*/
/*	run;*/
/*    */
/*	proc sort data=&dataset1. out=caciextl.&dataset1.;*/
/*	by Results_FileDate;*/
/*	run;*/
/**/
/**/
/*%mend;*/



%macro sort_responsedate(dataset1);

	data &dataset1.;
		format  RESPONSE_DATE_SAS date9.;
		set  caciextl.&dataset1.;
		RESPONSE_DATE_SAS=input(scan(RESPONSEDATE, 1,' '),YYMMDD10.);
		drop VAR:;
	run;

	proc sort data=&dataset1. out=caciextl.&dataset1.;
		by Results_FileDate;
	run;

%mend;

%sort_responsedate(results_hi_digital_med);
%sort_responsedate(results_hi_Complaints_med);
%sort_responsedate(results_Blua_med);



/* Send Notification Email */

FILENAME COMPLETE EMAIL
BCC = ( &emails )
SUBJECT="Medallia Results Files Process - Complete"
;

DATA _NULL_;
FILE COMPLETE;
PUT ' ';
PUT "The Medallia Results Files process for &rptsasdate. has completed.";
PUT ' ';
PUT 'Have a great day.';
PUT ' ';
RUN;
 
/* Copy the data from CACIEXTL to  CACISHHI*/
/**/
proc copy in=CACIEXTL out=CACISHHI memtype=data;
	select 
		RESULTS_HI_BABC_MED 
		RESULTS_HI_RETAIL_MED 
		RESULTS_HI_UMME_MED
		RESULTS_HI_STRATEGIC_MED
		RESULTS_HI_DIGITAL_MED
		RESULTS_HI_COMPLAINTS_MED
		RESULTS_HI_TELEHEALTH_MED
		RESULTS_HI_HOSPITAL_MED
		RESULTS_BLUA_MED
		RESULTS_DIGITAL_MESSAGING
	;
run;

/* Copy the data from CACIEXTL to  CACISHHS*/
/**/
proc copy in=CACIEXTL out=CACISHHS memtype=data;
	select 
		RESULTS_OPTICAL_MED
		RESULTS_BUPA_DENTAL_MED
	;
run;

GOPTIONS NOACCESSIBLE;
%LET _CLIENTTASKLABEL=;
%LET _CLIENTPROCESSFLOWNAME=;
%LET _CLIENTPROJECTPATH=;
%LET _CLIENTPROJECTPATHHOST=;
%LET _CLIENTPROJECTNAME=;
%LET _SASPROGRAMFILE=;
%LET _SASPROGRAMFILEHOST=;

%LET _CLIENTTASKLABEL='End_Timing';
%LET _CLIENTPROCESSFLOWNAME='Process Flow';
%LET _CLIENTPROJECTPATH='\\internal.bupa.com.au\DFS$\MEL-SHARED\Marketing & Sales\Customer Insights\Research\Automation\Current Project\ImportMedalliaResultsFiles.egp';
%LET _CLIENTPROJECTPATHHOST='PCNX340';
%LET _CLIENTPROJECTNAME='ImportMedalliaResultsFiles.egp';
%LET _SASPROGRAMFILE='';
%LET _SASPROGRAMFILEHOST='';

GOPTIONS ACCESSIBLE;

/* Create Finish Date and DateTime */

%put &MAX_ID;

/*data _null_;*/
data work.timing_end;
length PROCESS_ID 8;
PROCESS_ID = &MAX_ID + 1;
/*length PROCESS_NAME $ 100;*/
/*PROCESS_NAME='Claims Master Tables';*/
format PROCESS_END_DATE date9.;
PROCESS_END_DATE = today();
format PROCESS_END_DATETIME datetime20.;
PROCESS_END_DATETIME = datetime();
format PROCESS_END_TIME time8.;
PROCESS_END_TIME = timepart(PROCESS_END_DATETIME);
put "Formatted end day: " PROCESS_END_DATE " , formatted end datetime: " PROCESS_END_DATETIME " , formatted end time: " PROCESS_END_TIME;
run;

data work.timing2;
merge work.timing (in=a)
	  work.timing_end (in=b);
by PROCESS_ID;
if a;
run;



/* Create Process Time */

data work.timing2;
set work.timing2;
/*format PROCESS_START_TIME time8.;*/
/*format PROCESS_END_TIME time8.;*/
format PROCESS_TIME time8.;
/*PROCESS_START_TIME = timepart(PROCESS_START_DATETIME);*/
/*PROCESS_END_TIME = timepart(PROCESS_END_DATETIME);*/
PROCESS_TIME = PROCESS_END_TIME - PROCESS_START_TIME;
run;



/* Rebuild Last record (Id) */ 

PROC SQL;
   CREATE TABLE work.max_timing AS 
   SELECT (max(t1.PROCESS_ID)) AS max_id
		FROM cacirsrh.project_timing t1;
QUIT;

PROC SQL NOPRINT;
SELECT max_id
INTO :MAX_ID2
FROM work.max_timing;
QUIT;

%put &MAX_ID2;


data work.timing3;
set work.timing2;
PROCESS_ID = &MAX_ID2 + 1;
run;


/* Write timing record to table */

data cacirsrh.project_timing;
set cacirsrh.project_timing
	work.timing3;
run;


GOPTIONS NOACCESSIBLE;
%LET _CLIENTTASKLABEL=;
%LET _CLIENTPROCESSFLOWNAME=;
%LET _CLIENTPROJECTPATH=;
%LET _CLIENTPROJECTPATHHOST=;
%LET _CLIENTPROJECTNAME=;
%LET _SASPROGRAMFILE=;
%LET _SASPROGRAMFILEHOST=;

